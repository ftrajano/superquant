#!/usr/bin/env node

// Script para debugar opera√ß√µes recentes do usu√°rio modelo
// Uso: MONGODB_URI="sua-uri" node scripts/debug-recent-operations.js

const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  name: String,
  email: String,
  role: String
}, { timestamps: true });

const OperacaoSchema = new mongoose.Schema({
  userId: String,
  idVisual: String,
  ticker: String,
  nome: String,
  tipo: String,
  direcao: String,
  status: String,
  resultadoTotal: Number,
  dataAbertura: Date,
  dataFechamento: Date,
  operacaoOriginalId: String,
  operacoesRelacionadas: [String],
  preco: Number,
  quantidade: Number,
  valorTotal: Number,
  mesReferencia: String,
  anoReferencia: Number
}, { timestamps: true });

const User = mongoose.model('User', UserSchema, 'users');
const Operacao = mongoose.model('Operacao', OperacaoSchema, 'operacoes');

async function debugRecentOperations() {
  try {
    const mongoUri = process.env.MONGODB_URI;
    if (!mongoUri) {
      console.log('‚ùå MONGODB_URI n√£o definida');
      return;
    }

    await mongoose.connect(mongoUri, { dbName: 'opcoes-app' });
    console.log('‚úÖ Conectado ao MongoDB (database: opcoes-app)');

    // Buscar usu√°rio modelo
    console.log('\nüîç Buscando usu√°rio modelo...');
    const modeloUser = await User.findOne({ role: 'modelo' }).lean();
    
    if (!modeloUser) {
      console.log('‚ùå Nenhum usu√°rio modelo encontrado!');
      return;
    }
    
    console.log('üëë Usu√°rio modelo encontrado:');
    console.log(`   Nome: ${modeloUser.name}`);
    console.log(`   Email: ${modeloUser.email}`);
    console.log(`   ID: ${modeloUser._id}`);

    // Buscar opera√ß√µes recentes do usu√°rio modelo (√∫ltimas 24 horas)
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    
    console.log('\nüîç Buscando opera√ß√µes recentes do usu√°rio modelo (√∫ltimas 24h)...');
    console.log(`Desde: ${oneDayAgo.toLocaleString('pt-BR')}`);
    
    const recentOperations = await Operacao.find({
      userId: modeloUser._id.toString(),
      createdAt: { $gte: oneDayAgo }
    }).sort({ createdAt: -1 }).lean();
    
    console.log(`\nüìä Encontradas ${recentOperations.length} opera√ß√µes recentes:`);
    
    if (recentOperations.length === 0) {
      console.log('‚ùå Nenhuma opera√ß√£o foi criada nas √∫ltimas 24 horas!');
      console.log('üí° Isso pode explicar por que n√£o houve notifica√ß√£o.');
    } else {
      recentOperations.forEach((op, i) => {
        console.log(`\n${i+1}. OPERA√á√ÉO ${op.idVisual}:`);
        console.log(`   Ticker: ${op.ticker}`);
        console.log(`   Tipo: ${op.tipo} ${op.direcao}`);
        console.log(`   Status: ${op.status}`);
        console.log(`   Criada: ${op.createdAt.toLocaleString('pt-BR')}`);
        console.log(`   Data Abertura: ${op.dataAbertura ? op.dataAbertura.toLocaleString('pt-BR') : 'N/A'}`);
        console.log(`   UserId: ${op.userId}`);
        console.log(`   Valor: R$ ${op.valorTotal || 0}`);
        
        // Verificar se o userId est√° correto
        if (op.userId === modeloUser._id.toString()) {
          console.log('   ‚úÖ UserId correto - deveria ter enviado notifica√ß√£o');
        } else {
          console.log('   ‚ùå UserId incorreto - n√£o enviaria notifica√ß√£o');
        }
      });
    }

    // Buscar tamb√©m as 5 opera√ß√µes mais recentes independente de data
    console.log('\nüîç √öltimas 5 opera√ß√µes do usu√°rio modelo (qualquer data):');
    
    const lastOperations = await Operacao.find({
      userId: modeloUser._id.toString()
    }).sort({ createdAt: -1 }).limit(5).lean();
    
    lastOperations.forEach((op, i) => {
      console.log(`\n${i+1}. ${op.idVisual} - ${op.ticker}`);
      console.log(`   Status: ${op.status}`);
      console.log(`   Criada: ${op.createdAt.toLocaleString('pt-BR')}`);
      console.log(`   Valor: R$ ${op.valorTotal || 0}`);
    });

    // Verificar se h√° problemas com a fun√ß√£o de notifica√ß√£o
    console.log('\nü§ñ Testando fun√ß√£o de notifica√ß√£o diretamente...');
    try {
      const { notifyOperacaoAbertura } = require('../lib/telegram');
      
      if (recentOperations.length > 0) {
        const testOp = recentOperations[0];
        console.log(`Testando notifica√ß√£o para opera√ß√£o ${testOp.idVisual}...`);
        
        const result = await notifyOperacaoAbertura(testOp);
        if (result) {
          console.log('‚úÖ Fun√ß√£o de notifica√ß√£o funcionou!');
        } else {
          console.log('‚ùå Fun√ß√£o de notifica√ß√£o falhou!');
        }
      }
    } catch (telegramError) {
      console.error('‚ùå Erro na fun√ß√£o de notifica√ß√£o:', telegramError.message);
    }

  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå Conex√£o fechada');
  }
}

debugRecentOperations();